package dat104.obl3.controllers;

import dat104.obl3.models.*;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Servlet implementation class RegistreringsServlet
 */
@WebServlet("/registrering")
public class RegistreringsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	HttpSession session;
	
	//Kobler til databasen
	//hive denne inn i init()?
	static Database database = new Database();

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.getRequestDispatcher("WEB-INF/registrationform.jsp").forward(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		boolean gyldigInput = true;
		
		// Henter session og lager et nytt brukerobjekt av attributtene.
		session = request.getSession(false);
		String brukernavn = (String) request.getParameter("brukernavn");
		String navn = (String) request.getParameter("navn");
		String epost = (String) request.getParameter("epost");
		String passord = (String) request.getParameter("passord");
			
		// Oppretter bruker og sender brukeren videre til MenyServlet dersom input er gyldig. Viser registrationerror.jsp hvis ikke.
		if(validerInput(brukernavn, navn, epost, passord)) {
			Bruker bruker = new Bruker(brukernavn, navn, epost, passord);
			//TODO: .registrerBruker(bruker) fra klassen DatabaseStyring
			database.leggTilBruker(brukernavn, navn, epost, passord);
			session.setAttribute("bruker", bruker);
			response.sendRedirect("meny");
		} else {
			request.getRequestDispatcher("WEB-INF/registrationerror.jsp").forward(request, response);
		}		
	}
	
	/**
	 * Metode for å validere alle input
	 * @param brukernavn
	 * @param navn
	 * @param epost
	 * @param passord
	 * @return
	 */
	public static boolean validerInput(String brukernavn, String navn, String epost, String passord) {
		return validerBrukernavn(brukernavn) && validerNavn(navn) && validerEpost(epost) && validerPassord(passord);
	}
	
	/**
	 * Metode for validering av brukernavn
	 * @param brukernavn
	 * @return
	 */
	public static boolean validerBrukernavn(String brukernavn) {
		String lovligRegex = "[ÆØÅA-Zæøåa-z0-9]+";
		return brukernavn != null && brukernavn.matches(lovligRegex) && database.validerBrukernavn(brukernavn);
	}
	
	/**
	 * Metode for validering av passord
	 * @param passord
	 * @return
	 */
	public static boolean validerPassord(String passord) {
		String lovligRegex = "[ÆØÅA-Zæøåa-z0-9]+";
		return passord != null && passord.matches(lovligRegex);
	}
	
	/**
	 * Metode for validering av epost
	 * @param epost
	 * @return
	 */
	public static boolean validerEpost(String epost) {
		String lovligRegex = "^[A-Za-zæøå0-9._%+-]+@[A-Za-zæøå0-9.-]+\\.[A-Za-z]{2,6}$";	
		return epost != null && epost.matches(lovligRegex) && database.validerEpost(epost);
	}
	
	/**
	 * Metode for validering av navn
	 * @param navn
	 * @return
	 */
	public static boolean validerNavn(String navn) {		
		String lovligRegex = "[ÆØÅA-Z][æøåa-z]+([%-][ÆØÅA-Z][æøåa-z]+)?";
		return navn != null && navn.matches(lovligRegex);	
	}
}
